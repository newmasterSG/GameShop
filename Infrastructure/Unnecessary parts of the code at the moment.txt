               
                //GetRequest devRequest = new GetRequest(client, "https://api.rawg.io/api/developers?key=e5be80adcd7348d9bfe0c55a970b5215&page=");
                
                //List<Task<RootObject<DevelopersModel>>> task2 = new List<Task<RootObject<DevelopersModel>>>();
               
               
               
               for (int i = 1; i <= 3; i++)
                {
                    task2.Add(new Deserializer<DevelopersModel>().Deserialize(await devRequest.GetJson(i)));
                }

                var results2 = await Task.WhenAll(task2);

                foreach (var result in results2)
                {
                    foreach (var item in result.Results)
                    {
                        DevelopersModel model = await DeveloperImporter.CreateDeveloper(item);

                        await developerServices.AddAsync(model);
                    }
                }

                var existDev = await developerServices.GetAllAsync();
                var exist = existDev.Skip(19).SkipLast(1).ToList();
                var devList = new List<DevelopersModel>();
                foreach (var dev in exist)
                {
                    devList.Add(dev);
                    var url = string.Format(gamesUrl, apiKey, dev.Slug, "{0}");
                    GetRequest games = new GetRequest(client, url);
                    for (int i = 1; i <= 1; i++)
                    {
                        task.Add(new Deserializer<GamesModel>().Deserialize(await games.GetJson(i)));
                    }
                }

                var results = await Task.WhenAll(task);
                var pairs = devList.Zip(results, (dev, result) => (dev, result));

                foreach (var (dev, result) in pairs)
                {
                    foreach (var item in result.Results)
                    {
                        gam = await gameImporter.CreateGame(item, dev);
                        var gam1 = await gameShopContext.Games.FirstOrDefaultAsync(x => x.Name == gam.Name);
                        if (gam1 == null)
                        {
                            await gamesModelService.AddAsync(gam);
                        }
                    }
                }




                 builder.Services.AddAuthentication(option =>
            {
                option.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                option.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                option.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
           .AddCookie(options =>
           {
               options.Cookie.HttpOnly = true;
               options.ExpireTimeSpan = TimeSpan.FromMinutes(5);
               options.SlidingExpiration = true;
               options.LoginPath = "/Account/Login";
           })
           .AddJwtBearer(options =>
            {
                options.SaveToken = true;
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = builder.Configuration["Jwt:Issuer"],
                    ValidAudience = builder.Configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
                };
            });




            
        [HttpPost]
        [Authorize]
        public async Task<IActionResult> AddReview(int gameId, string reviewText, int rating, string token)
        {
            var accessToken = await HttpContext.GetTokenAsync("access_token");

            var client = _httpClientFactory.CreateClient();

            client.SetBearerToken(accessToken);

            var postData = new List<KeyValuePair<string, string>>
            {
                new KeyValuePair<string, string>("gameId", gameId.ToString()),
                new KeyValuePair<string, string>("reviewText", reviewText),
                new KeyValuePair<string, string>("rating", rating.ToString()),
            };

            // Создаем HttpContent с данными
            var content = new FormUrlEncodedContent(postData);

            var response = await client.PostAsync($"https://localhost:7242/api/Reviews/AddReview?gameId={gameId}&reviewText={reviewText}&rating={rating}", content);
            if (response.IsSuccessStatusCode)
            {
                // Log a successful response
                _logger.LogInformation("HTTP POST was successful.");
            }
            else
            {
                // Log an unsuccessful response
                _logger.LogError($"HTTP POST failed with status code: {response}");
            }

            return Ok();
        }

                        data: { gameId: gameId, reviewText: reviewText, rating: rating},


                                [AllowAnonymous]
        [HttpGet]
        public IActionResult ExternalLogin(string provider, string returnUrl = null)
        {
            string authenticationScheme = string.Empty;

            if (provider.Equals("google"))
            {
                authenticationScheme = GoogleDefaults.AuthenticationScheme;
            }

            var redirectUrl = Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl });
            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);
            return new ChallengeResult(authenticationScheme, properties);
        }

        [AllowAnonymous]
        [HttpGet]
        public async Task<IActionResult> ExternalLoginCallback(string returnUrl = null, string remoteError = null)
        {
            if (remoteError != null)
            {
                // Обработка ошибки
                return RedirectToAction("Login");
            }

            var info = await _signInManager.GetExternalLoginInfoAsync();
            if (info == null)
            {
                // Обработка ошибки
                return RedirectToAction("Login");
            }

            // Если пользователь уже зарегистрирован на вашем сайте, можно автоматически войти
            var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor: true);
            if (result.Succeeded)
            {
                return LocalRedirect(returnUrl);
            }

            // Если пользователь еще не зарегистрирован, перенаправьте на страницу регистрации или другую обработку
            ViewBag.ReturnUrl = returnUrl;
            ViewBag.LoginProvider = info.LoginProvider;
            return View("ExternalLoginConfirmation");
        }